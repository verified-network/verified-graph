// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ManagerAdded extends ethereum.Event {
  get params(): ManagerAdded__Params {
    return new ManagerAdded__Params(this);
  }
}

export class ManagerAdded__Params {
  _event: ManagerAdded;

  constructor(event: ManagerAdded) {
    this._event = event;
  }

  get manager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get role(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get country(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get id(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class Client__getAccessResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Client__getRoleResult {
  value0: Bytes;
  value1: Bytes;

  constructor(value0: Bytes, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    return map;
  }
}

export class Client extends ethereum.SmartContract {
  static bind(address: Address): Client {
    return new Client("Client", address);
  }

  getAMLManager(): Address {
    let result = super.call("getAMLManager", "getAMLManager():(address)", []);

    return result[0].toAddress();
  }

  try_getAMLManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAMLManager",
      "getAMLManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCustody(_client: Address): Bytes {
    let result = super.call("getCustody", "getCustody(address):(bytes32)", [
      ethereum.Value.fromAddress(_client)
    ]);

    return result[0].toBytes();
  }

  try_getCustody(_client: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getCustody", "getCustody(address):(bytes32)", [
      ethereum.Value.fromAddress(_client)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAccess(_client: Address): Client__getAccessResult {
    let result = super.call(
      "getAccess",
      "getAccess(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_client)]
    );

    return new Client__getAccessResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getAccess(
    _client: Address
  ): ethereum.CallResult<Client__getAccessResult> {
    let result = super.tryCall(
      "getAccess",
      "getAccess(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_client)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Client__getAccessResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getManager(_client: Address): Address {
    let result = super.call("getManager", "getManager(address):(address)", [
      ethereum.Value.fromAddress(_client)
    ]);

    return result[0].toAddress();
  }

  try_getManager(_client: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("getManager", "getManager(address):(address)", [
      ethereum.Value.fromAddress(_client)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isRegistered(_client: Address): boolean {
    let result = super.call("isRegistered", "isRegistered(address):(bool)", [
      ethereum.Value.fromAddress(_client)
    ]);

    return result[0].toBoolean();
  }

  try_isRegistered(_client: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isRegistered", "isRegistered(address):(bool)", [
      ethereum.Value.fromAddress(_client)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAMLStatus(_client: Address): boolean {
    let result = super.call("getAMLStatus", "getAMLStatus(address):(bool)", [
      ethereum.Value.fromAddress(_client)
    ]);

    return result[0].toBoolean();
  }

  try_getAMLStatus(_client: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("getAMLStatus", "getAMLStatus(address):(bool)", [
      ethereum.Value.fromAddress(_client)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getClients(_manager: Address, _status: boolean): Array<Address> {
    let result = super.call(
      "getClients",
      "getClients(address,bool):(address[])",
      [
        ethereum.Value.fromAddress(_manager),
        ethereum.Value.fromBoolean(_status)
      ]
    );

    return result[0].toAddressArray();
  }

  try_getClients(
    _manager: Address,
    _status: boolean
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getClients",
      "getClients(address,bool):(address[])",
      [
        ethereum.Value.fromAddress(_manager),
        ethereum.Value.fromBoolean(_status)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getRole(_user: Address): Client__getRoleResult {
    let result = super.call("getRole", "getRole(address):(bytes32,bytes32)", [
      ethereum.Value.fromAddress(_user)
    ]);

    return new Client__getRoleResult(result[0].toBytes(), result[1].toBytes());
  }

  try_getRole(_user: Address): ethereum.CallResult<Client__getRoleResult> {
    let result = super.tryCall(
      "getRole",
      "getRole(address):(bytes32,bytes32)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Client__getRoleResult(value[0].toBytes(), value[1].toBytes())
    );
  }

  getManagers(_role: Bytes, _country: Bytes): Array<Address> {
    let result = super.call(
      "getManagers",
      "getManagers(bytes32,bytes32):(address[])",
      [
        ethereum.Value.fromFixedBytes(_role),
        ethereum.Value.fromFixedBytes(_country)
      ]
    );

    return result[0].toAddressArray();
  }

  try_getManagers(
    _role: Bytes,
    _country: Bytes
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getManagers",
      "getManagers(bytes32,bytes32):(address[])",
      [
        ethereum.Value.fromFixedBytes(_role),
        ethereum.Value.fromFixedBytes(_country)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _kyc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetCustodyCall extends ethereum.Call {
  get inputs(): SetCustodyCall__Inputs {
    return new SetCustodyCall__Inputs(this);
  }

  get outputs(): SetCustodyCall__Outputs {
    return new SetCustodyCall__Outputs(this);
  }
}

export class SetCustodyCall__Inputs {
  _call: SetCustodyCall;

  constructor(call: SetCustodyCall) {
    this._call = call;
  }

  get _client(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _account(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetCustodyCall__Outputs {
  _call: SetCustodyCall;

  constructor(call: SetCustodyCall) {
    this._call = call;
  }
}

export class SetAccessCall extends ethereum.Call {
  get inputs(): SetAccessCall__Inputs {
    return new SetAccessCall__Inputs(this);
  }

  get outputs(): SetAccessCall__Outputs {
    return new SetAccessCall__Outputs(this);
  }
}

export class SetAccessCall__Inputs {
  _call: SetAccessCall;

  constructor(call: SetAccessCall) {
    this._call = call;
  }

  get login(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetAccessCall__Outputs {
  _call: SetAccessCall;

  constructor(call: SetAccessCall) {
    this._call = call;
  }
}

export class SetManagerCall extends ethereum.Call {
  get inputs(): SetManagerCall__Inputs {
    return new SetManagerCall__Inputs(this);
  }

  get outputs(): SetManagerCall__Outputs {
    return new SetManagerCall__Outputs(this);
  }
}

export class SetManagerCall__Inputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get _client(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _manager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetManagerCall__Outputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }
}

export class SetAMLStatusCall extends ethereum.Call {
  get inputs(): SetAMLStatusCall__Inputs {
    return new SetAMLStatusCall__Inputs(this);
  }

  get outputs(): SetAMLStatusCall__Outputs {
    return new SetAMLStatusCall__Outputs(this);
  }
}

export class SetAMLStatusCall__Inputs {
  _call: SetAMLStatusCall;

  constructor(call: SetAMLStatusCall) {
    this._call = call;
  }

  get _client(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetAMLStatusCall__Outputs {
  _call: SetAMLStatusCall;

  constructor(call: SetAMLStatusCall) {
    this._call = call;
  }
}

export class AddRoleCall extends ethereum.Call {
  get inputs(): AddRoleCall__Inputs {
    return new AddRoleCall__Inputs(this);
  }

  get outputs(): AddRoleCall__Outputs {
    return new AddRoleCall__Outputs(this);
  }
}

export class AddRoleCall__Inputs {
  _call: AddRoleCall;

  constructor(call: AddRoleCall) {
    this._call = call;
  }

  get _submanager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _country(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _role(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _id(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class AddRoleCall__Outputs {
  _call: AddRoleCall;

  constructor(call: AddRoleCall) {
    this._call = call;
  }
}

export class RemoveRoleCall extends ethereum.Call {
  get inputs(): RemoveRoleCall__Inputs {
    return new RemoveRoleCall__Inputs(this);
  }

  get outputs(): RemoveRoleCall__Outputs {
    return new RemoveRoleCall__Outputs(this);
  }
}

export class RemoveRoleCall__Inputs {
  _call: RemoveRoleCall;

  constructor(call: RemoveRoleCall) {
    this._call = call;
  }

  get _submanager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _country(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _role(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RemoveRoleCall__Outputs {
  _call: RemoveRoleCall;

  constructor(call: RemoveRoleCall) {
    this._call = call;
  }
}
