// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DematAccountRegistered extends ethereum.Event {
  get params(): DematAccountRegistered__Params {
    return new DematAccountRegistered__Params(this);
  }
}

export class DematAccountRegistered__Params {
  _event: DematAccountRegistered;

  constructor(event: DematAccountRegistered) {
    this._event = event;
  }

  get registrationRef(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get country(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get registrationDate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SecurityRegistered extends ethereum.Event {
  get params(): SecurityRegistered__Params {
    return new SecurityRegistered__Params(this);
  }
}

export class SecurityRegistered__Params {
  _event: SecurityRegistered;

  constructor(event: SecurityRegistered) {
    this._event = event;
  }

  get registrationRef(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get currencyCode(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get stype(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get isin(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get company(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get itype(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }

  get noOfCertificates(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get faceValue(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get lockInReason(): Bytes {
    return this._event.parameters[9].value.toBytes();
  }

  get lockInReleaseDate(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }

  get registrationDate(): BigInt {
    return this._event.parameters[11].value.toBigInt();
  }

  get status(): Bytes {
    return this._event.parameters[12].value.toBytes();
  }
}

export class PreTrade__getRegistrationRequestResult {
  value0: Address;
  value1: Bytes;
  value2: Bytes;
  value3: Bytes;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: Bytes,
    value2: Bytes,
    value3: Bytes,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class PreTrade__getConfirmationRequestResultValue0Struct extends ethereum.Tuple {
  get requestor(): Address {
    return this[0].toAddress();
  }

  get token(): Address {
    return this[1].toAddress();
  }

  get currencyCode(): Bytes {
    return this[2].toBytes();
  }

  get stype(): Bytes {
    return this[3].toBytes();
  }

  get isin(): Bytes {
    return this[4].toBytes();
  }

  get company(): Bytes {
    return this[5].toBytes();
  }

  get itype(): Bytes {
    return this[6].toBytes();
  }

  get lockInReason(): Bytes {
    return this[7].toBytes();
  }

  get approvalStatus(): Bytes {
    return this[8].toBytes();
  }

  get noOfCertificates(): BigInt {
    return this[9].toBigInt();
  }

  get lockInReleaseDate(): BigInt {
    return this[10].toBigInt();
  }

  get registrationRequestDate(): BigInt {
    return this[11].toBigInt();
  }

  get faceValue(): BigInt {
    return this[12].toBigInt();
  }
}

export class PreTrade__getSecurityResult {
  value0: Bytes;
  value1: Bytes;
  value2: Address;

  constructor(value0: Bytes, value1: Bytes, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }
}

export class PreTrade extends ethereum.SmartContract {
  static bind(address: Address): PreTrade {
    return new PreTrade("PreTrade", address);
  }

  getRegistrationRequests(_countryCode: Bytes): Array<Bytes> {
    let result = super.call(
      "getRegistrationRequests",
      "getRegistrationRequests(bytes32):(bytes32[])",
      [ethereum.Value.fromFixedBytes(_countryCode)]
    );

    return result[0].toBytesArray();
  }

  try_getRegistrationRequests(
    _countryCode: Bytes
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getRegistrationRequests",
      "getRegistrationRequests(bytes32):(bytes32[])",
      [ethereum.Value.fromFixedBytes(_countryCode)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getRegistrationRequest(_ref: Bytes): PreTrade__getRegistrationRequestResult {
    let result = super.call(
      "getRegistrationRequest",
      "getRegistrationRequest(bytes32):(address,bytes32,bytes32,bytes32,uint256)",
      [ethereum.Value.fromFixedBytes(_ref)]
    );

    return new PreTrade__getRegistrationRequestResult(
      result[0].toAddress(),
      result[1].toBytes(),
      result[2].toBytes(),
      result[3].toBytes(),
      result[4].toBigInt()
    );
  }

  try_getRegistrationRequest(
    _ref: Bytes
  ): ethereum.CallResult<PreTrade__getRegistrationRequestResult> {
    let result = super.tryCall(
      "getRegistrationRequest",
      "getRegistrationRequest(bytes32):(address,bytes32,bytes32,bytes32,uint256)",
      [ethereum.Value.fromFixedBytes(_ref)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PreTrade__getRegistrationRequestResult(
        value[0].toAddress(),
        value[1].toBytes(),
        value[2].toBytes(),
        value[3].toBytes(),
        value[4].toBigInt()
      )
    );
  }

  registerSecurities(
    _currencyCode: Bytes,
    _stype: Bytes,
    _isin: Bytes,
    _company: Bytes,
    _itype: Bytes,
    _noOfCertificates: BigInt,
    _faceValue: BigInt,
    _lockInReason: Bytes,
    _lockInReleaseDate: BigInt
  ): Bytes {
    let result = super.call(
      "registerSecurities",
      "registerSecurities(bytes32,bytes32,bytes32,bytes32,bytes32,uint256,uint256,bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(_currencyCode),
        ethereum.Value.fromFixedBytes(_stype),
        ethereum.Value.fromFixedBytes(_isin),
        ethereum.Value.fromFixedBytes(_company),
        ethereum.Value.fromFixedBytes(_itype),
        ethereum.Value.fromUnsignedBigInt(_noOfCertificates),
        ethereum.Value.fromUnsignedBigInt(_faceValue),
        ethereum.Value.fromFixedBytes(_lockInReason),
        ethereum.Value.fromUnsignedBigInt(_lockInReleaseDate)
      ]
    );

    return result[0].toBytes();
  }

  try_registerSecurities(
    _currencyCode: Bytes,
    _stype: Bytes,
    _isin: Bytes,
    _company: Bytes,
    _itype: Bytes,
    _noOfCertificates: BigInt,
    _faceValue: BigInt,
    _lockInReason: Bytes,
    _lockInReleaseDate: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "registerSecurities",
      "registerSecurities(bytes32,bytes32,bytes32,bytes32,bytes32,uint256,uint256,bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(_currencyCode),
        ethereum.Value.fromFixedBytes(_stype),
        ethereum.Value.fromFixedBytes(_isin),
        ethereum.Value.fromFixedBytes(_company),
        ethereum.Value.fromFixedBytes(_itype),
        ethereum.Value.fromUnsignedBigInt(_noOfCertificates),
        ethereum.Value.fromUnsignedBigInt(_faceValue),
        ethereum.Value.fromFixedBytes(_lockInReason),
        ethereum.Value.fromUnsignedBigInt(_lockInReleaseDate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getConfirmationRequests(_countryCode: Bytes): Array<Bytes> {
    let result = super.call(
      "getConfirmationRequests",
      "getConfirmationRequests(bytes32):(bytes32[])",
      [ethereum.Value.fromFixedBytes(_countryCode)]
    );

    return result[0].toBytesArray();
  }

  try_getConfirmationRequests(
    _countryCode: Bytes
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getConfirmationRequests",
      "getConfirmationRequests(bytes32):(bytes32[])",
      [ethereum.Value.fromFixedBytes(_countryCode)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getConfirmationRequest(
    _ref: Bytes
  ): PreTrade__getConfirmationRequestResultValue0Struct {
    let result = super.call(
      "getConfirmationRequest",
      "getConfirmationRequest(bytes32):((address,address,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromFixedBytes(_ref)]
    );

    return changetype<PreTrade__getConfirmationRequestResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getConfirmationRequest(
    _ref: Bytes
  ): ethereum.CallResult<PreTrade__getConfirmationRequestResultValue0Struct> {
    let result = super.tryCall(
      "getConfirmationRequest",
      "getConfirmationRequest(bytes32):((address,address,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromFixedBytes(_ref)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PreTrade__getConfirmationRequestResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getSecurity(_token: Address): PreTrade__getSecurityResult {
    let result = super.call(
      "getSecurity",
      "getSecurity(address):(bytes32,bytes32,address)",
      [ethereum.Value.fromAddress(_token)]
    );

    return new PreTrade__getSecurityResult(
      result[0].toBytes(),
      result[1].toBytes(),
      result[2].toAddress()
    );
  }

  try_getSecurity(
    _token: Address
  ): ethereum.CallResult<PreTrade__getSecurityResult> {
    let result = super.tryCall(
      "getSecurity",
      "getSecurity(address):(bytes32,bytes32,address)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PreTrade__getSecurityResult(
        value[0].toBytes(),
        value[1].toBytes(),
        value[2].toAddress()
      )
    );
  }

  getDP(_party: Address): Bytes {
    let result = super.call("getDP", "getDP(address):(bytes32)", [
      ethereum.Value.fromAddress(_party)
    ]);

    return result[0].toBytes();
  }

  try_getDP(_party: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getDP", "getDP(address):(bytes32)", [
      ethereum.Value.fromAddress(_party)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _viaFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _securitiesRegistry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _securityToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _kyc(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _client(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RegisterDematAccountCall extends ethereum.Call {
  get inputs(): RegisterDematAccountCall__Inputs {
    return new RegisterDematAccountCall__Inputs(this);
  }

  get outputs(): RegisterDematAccountCall__Outputs {
    return new RegisterDematAccountCall__Outputs(this);
  }
}

export class RegisterDematAccountCall__Inputs {
  _call: RegisterDematAccountCall;

  constructor(call: RegisterDematAccountCall) {
    this._call = call;
  }

  get _currencyCode(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RegisterDematAccountCall__Outputs {
  _call: RegisterDematAccountCall;

  constructor(call: RegisterDematAccountCall) {
    this._call = call;
  }
}

export class SetRegistrationStatusCall extends ethereum.Call {
  get inputs(): SetRegistrationStatusCall__Inputs {
    return new SetRegistrationStatusCall__Inputs(this);
  }

  get outputs(): SetRegistrationStatusCall__Outputs {
    return new SetRegistrationStatusCall__Outputs(this);
  }
}

export class SetRegistrationStatusCall__Inputs {
  _call: SetRegistrationStatusCall;

  constructor(call: SetRegistrationStatusCall) {
    this._call = call;
  }

  get _ref(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _DPID(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _dematAccountNo(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SetRegistrationStatusCall__Outputs {
  _call: SetRegistrationStatusCall;

  constructor(call: SetRegistrationStatusCall) {
    this._call = call;
  }
}

export class RegisterSecuritiesCall extends ethereum.Call {
  get inputs(): RegisterSecuritiesCall__Inputs {
    return new RegisterSecuritiesCall__Inputs(this);
  }

  get outputs(): RegisterSecuritiesCall__Outputs {
    return new RegisterSecuritiesCall__Outputs(this);
  }
}

export class RegisterSecuritiesCall__Inputs {
  _call: RegisterSecuritiesCall;

  constructor(call: RegisterSecuritiesCall) {
    this._call = call;
  }

  get _currencyCode(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _stype(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _isin(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _company(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _itype(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _noOfCertificates(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _faceValue(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _lockInReason(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get _lockInReleaseDate(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class RegisterSecuritiesCall__Outputs {
  _call: RegisterSecuritiesCall;

  constructor(call: RegisterSecuritiesCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ConfirmSecuritiesCall extends ethereum.Call {
  get inputs(): ConfirmSecuritiesCall__Inputs {
    return new ConfirmSecuritiesCall__Inputs(this);
  }

  get outputs(): ConfirmSecuritiesCall__Outputs {
    return new ConfirmSecuritiesCall__Outputs(this);
  }
}

export class ConfirmSecuritiesCall__Inputs {
  _call: ConfirmSecuritiesCall;

  constructor(call: ConfirmSecuritiesCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ref(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _status(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ConfirmSecuritiesCall__Outputs {
  _call: ConfirmSecuritiesCall;

  constructor(call: ConfirmSecuritiesCall) {
    this._call = call;
  }
}
